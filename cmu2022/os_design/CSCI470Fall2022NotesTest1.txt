Test 1 will be on Sep 27th at 12:30pm

100% Multiple Choice
	20-25

Chapter 4  Processes
	We want to run more than one program per CPU
	Context Switch
		... See Cooperative Threading Assignment
	Cooperative
		Process says I give up the CPU to another Process
	Pre-emptive
		The "kernel" takes the CPU from a process
	Things associated with a process
		store all the registers for the CPU
		cin,cout, cerr stdin,stdout,stderr (3 streams)
		SS (Stack)
		CS (Code)
		Data RW variables, RO const
		Heap
		Commandline arguments
			int main(int argc, char *argv[])
		Return an integer to the OS
		A copy of all the Environment Variables
			getEnv
			setEnv
Chapter 5  Process API
		Nothing a user process does should crash/damage the OS for 
			other users or even other processes for the same user
		ForkBomb
		fork
			copy of the process then run both
		wait
			Wait for some other process to finish
		exec ->  system pause
Chapter 6	"Limited" Direct Execution
		Real memory and IO available to the machine
		The apparent memory and IO devices to the user program
		Kernel/User
			SegFault
		Trap/Trap Table
		Interrupt Vector Table
			Software Interrupts
				Windows
Chapter 7	CPU Scheduling
		Who gets the CPU next
			Assuming all sorts of silly
		Metric
			Turn-around
				average turn-around
			Response time
				average response-time
Chapter 8	Multilevel Feedback Scheduling
		Approach Windows ...
		Simple RR for each queue and have multiple queues for priority
Chapter 9	Lottery Scheduling
		Simple to implement
			lottery share
		Completely Fair Scheduler Linux
		Niceness
Chapter 13	Address Spaces
		Old a big block of memory
		------
		code
		------
		data
		------
		heap
		|
		V
		...
		^
		|
		stack
		------
		Nothing a user space program does with memory should harm
		the OS or any other process
Chapter 14	Memory API
	malloc
	free
	....calloc
	Valgrind
	* malloc_hook approach to debugging memory leaks
	
	..
	int *p;
	p=(int *)0x33ff44004;
	*p=20;
	...
Cooperative Threading Discussion
	gdb
	register passing arguments
		x86_64
		Windows rcx,rdx
		Linux rsi,rdi
	..	Arm64
			X0,X1,X2
	asm function
	gdb -> lldb
	gcc -S 
	*64bit Register Calling Convention
