;               TLBIO - BIOS ROUTINES FOR TLB COMPUTER
;
;       MODS BY WAYNE WALL, 2020.  SOME CODE TAKEN FROM SCOT ANDERSON, 1988.
;
;UNLESS INDICATED OTHERWISE, BIOS ROUTINES PRESERVE THE AC, X and Y REGISTERS
;AND RETURN WITH THE CARRY BIT = 0 on SUCCESS and = 1 ON FAILURE.  THE BIOS
;ROUTINES ARE ALLOWED TO USE THE TOP 16 BYTES OF PAGE ZERO.  THESE ROUTINES
;ARE NOT REENTRANT!
;
;CONSOLE INPUT:
;
;INTERFACE IS FOR A BUFFERED KEYBOARD.  THE HANDSHAKING IS SIMILAR TO THE
;CENTRONICS INTERFACE EXCEPT THE STROBE AND ACKOWLEDGE ARE ACTIVE HI AND
;THERE ARE ONLY SEVEN DATA BITS TRANSFERED.  A SIMPLE ENCODED KEYBOARD WILL
;ALSO WORK WITH THESE ROUTINES WITH THE ACKNOWLEDGE SIGNAL IGNORED.
;
;CONSOLE OUTPUT:
;
;DISPLAY IS MONOCHROME VIDEO OUTPUT GENERATED BY THE TLB VIDEO CARD.
;THE 1024-BYTE VIDEO MEMORY DIRECTLY MAPS ONE BYTE/CHAR TO 16 LINES OF
;64 CHARACTERS PER LINE.  A VIRTUAL "CURSOR" IS MAINTAINED AT A ROW
;(0,1,2,...,15) AND COLUMN (0,1,2,...,63) LOCATION.  THE NEXT CHARACTER
;WILL BE DISPLAYED AT THE CURSOR LOCATION.
;
;THE "TVOUT" ROUTINE TAKES SPECIAL ACTION FOR THE CARRIAGE RETURN, LINE
;FEED, TAB, FORM FEED AND BACKSPACE CHARACTERS.  IF THE CURSOR IS ON THE
; LAST LINE (15), A LINE FEED WILL SCROLL ALL LINES UP (TOP LINE CONTENT
;WILL BE LOST).

        .PAGE
        
        .LOC $00F0      ;TOP 16 BYTES OF PAGE 0.
        
ACSAVE: .BYTE 0         ;PLACE TO SAVE AC CONTENTS
XSAVE:  .BYTE 0         ;PLACE TO SAVE X CONTENTS
YSAVE:  .BYTE 0         ;PLACE TO SAVE Y CONTENTS

TVPTR:  .WORD 0         ;POINTER TO NEXT CURSOR LOC IN TV RAM
TVSCAN: .WORD 0         ;TEMP USED FOR TV SCROLLING ROUTINES
        
        .LOC BIOLOC
        
        ;UTILITY ROUTINES
        
        ;SAVE AC, X, Y REGISTERS
        
BIOSAV: STA     ACSAVE
        STX     XSAVE
        STY     YSAVE
        RTS
       
       ;RESTORE AC, X, Y REGISTERS
        
BIORES: LDA     ACSAVE
BIORXY: LDX     XSAVE
        LDY     YSAVE
        RTS

        ;       *** TLB KEYBOARD INPUT ROUTINES ***
        
        ;SOME I/O DEFINITIONS
        
        .DEF KBADDR = $EC00     ;KEYBOARD CHARACTER BUFFER LATCH ADDRESS.
                                ;KEYBOARD ACKNOWLEDGE STROBE IS ASSUMED
                                ;  TO BE THE MSB.
                                
        
        ;INITIALIZE KEYBOARD
        
KEYINI: PHA                     ;PRESERVE AC
        LDA#    0               ;CLEAR THE ACKNOWLEDGE BIT.
        STA     KBADDR
        PLA                     ;RESTORE AC
        CLC                     ;INDICATE SUCCESS
        RTS
        
        ;CHECK TO SEE IF A KEYBOARD CHAR IS AVAILABLE.
        ;THIS ROUTINE IMMEDIATELY RETURNS WITH CARRY BIT SET IF NO CHAR.
        ;OTHERWISE, RETRUNS WITH CARRY CLEAR AND CHAR IN THE AC.
        
KEYCHK: LDA     KBADDR          ;IF STROBE IS HI (1), WE HAVE A CHAR
        BPL     NOKEY           ;* PBPL * BRANCH IF NO CHAR AVAILABLE
        AND#    $7F             ;KEEP ONLY 7-BIT ASCII VALUE
        PHA
        LDA#    $80             ;ACKNOWLEDGE WE HAVE THE CHAR
        STA     KBADDR          ;BY SETTING ACKNOWLEDGE HI (1)
KEYWTS: LDA     KBADDR          ;NOW WE WAIT FOR STROBE TO GO AWAY
        BMI     KEYWTS
        LDA#    0               ;CLEAR THE ACKNOWLEDGE SIGNAL
        STA     KBADDR
        PLA                     ;GET 7-BIT ASCII CHAR BACK INTO AC
        CLC                     ;INDICATE SUCCESS
        RTS
NOKEY:  SEC                     ;INDICATE NO CHARACTER AVAILABLE
        RTS
        
        ;WAIT FOR A KEY TO BE STRUCK.  RETURNS WITH CARRY CLEAR AND
        ;7-BIT ASCII CODE FOR CHAR IN THE AC.
        
KEYINP: JSR     KEYCHK          ;WAIT FOR CHARACTER
        BCS     KEYINP
        RTS                     ;RETURN WITH CHAR IN THE AC.

        .PAGE
        
        ;       *** TLB VIDEO OUTPUT ROUTINES ***
        
        ;DEFINE SIZE OF SCREEN
        
        .DEF ROWMAX = 16        ;MAX ROWS
        .DEF COLMAX = 64        ;MAX COLUMNS/CHARS PER ROW
        
        ;SOME TV CHARACTER DEFINITIONS
        
        .DEF TVCR = $0D         ;CARRIAGE RETURN
        .DEF TVLF = $0A         ;LINE FEED
        .DEF TVBS = $08         ;BACKSPACE
        .DEF TVSPC = $20        ;SPACE
        .DEF TVTAB = $09        ;TAB
        .DEF TVFF = $0C         ;FORM FEED
        
        .DEF TVADDR = $E800        ;STARTING PAGE OF 1K TV MEMORY
        .DEF TVTOP = TVADDR+$0400  ;TOP OF TV RAM

        ;BIOS ENTRY TO INITIALIZE TV SCREEN
        
TVOINI:                         ;* PFALL * CLEAR SCREEN AND RETURN

        ; BIOS ENTRY TO HOME AND CLEAR THE SCREEN
        
TVOCLR: JSR     BIOSAV          ;SAVE REGISTERS
        JSR     TVINIT          ;INIT TV SCREEN
        JSR     BIORES          ;RESTORE REGISTERS
        CLC                     ;INDICATE SUCCESS
        RTS       

        ;BIOS ENTRY TO SET THE CURSOR POSITION
        ;AC = ROW NUMBER (0,1,2,...)
        ;X  = COLUMN NUMBER (0,1,2,...)
        ;
        ;THE OFFSET INTO TV MEMORY IS = ROW * COLMAX + COL
        
TVOCUR: JSR     BIOSAV          ;SAVE REGISTERS
        LDX     ACSAVE          ;NUMBER OF ROWS TO SKIP
        JSR     TVPMUL          ;CALC ROW * COLMAX
        LDA     XSAVE           ;FETCH COL VALUE
        JSR     TVPADD          ;ADD COL VALUE TO TVPTR
        CLC                     ;ADD TV MEMORY BASE ADDRESS TO OFFSET
        LDA#    <TVADDR
        ADC     TVPTR
        STA     TVPTR
        LDA#    >TVADDR
        ADC     TVPTR+1
        STA     TVPTR+1        
        JSR     BIORES          ;RESTORE REGISTERS
        CLC                     ;INDICATE SUCCESS
        RTS
      
        ;ROUTINE TO MULTIPLY ROW VALUE IN X-REGISTER TIMES COLMAX VALUE
        ;USING REPEATED ADDITION.  RESULT IS STORED IN TVPTR.
        
TVPMUL: LDA#    0               ;START WITH RUNNING SUM OF ZERO
        STA     TVPTR
        STA     TVPTR+1
        CPX#    0               ;ANY MORE ROWS TO SKIP?
        BEQ     TVPMRT          ;BRANCH IF NOT
TVPMLP: LDA#    COLMAX          ;ADD COLMAX VALUE TO RUNNING SUM
        JSR     TVPADD
        DEX                     ;DONE SKIPPING ROWS?
        BNE     TVPMLP          ;BRANCH IF NOT
TVPMRT: RTS
        
        ;ROUTINE TO ADD THE VALUE IN THE AC TO TVPTR
        
TVPADD: CLC                     ;PREPARE FOR ADDITION
        ADC     TVPTR
        STA     TVPTR
        LDA#    0
        ADC     TVPTR+1
        STA     TVPTR+1
        RTS
        
        ;BIOS ENTRY TO DISPLAY CHAR PASSED IN THE AC
        
TVOCHR: JSR     BIOSAV          ;SAVE REGISTERS
        JSR     TVOUTC          ;OUTPUT CHAR IN AC TO TV SCREEN
        JSR     BIORES          ;RESTORE REGISTERS
        CLC                     ;INDICATE SUCCESS
        RTS
        
        .PAGE

        ;INITIALIZE TLB TV
        
TVINIT: LDA#    TVSPC           ;ASCII FOR SPACE CHAR
FILSCR: LDX#    0               ;ENTER HERE TO FILL SCREEN WITH CHAR IN AC
FILLP:  STAX    TVADDR          ;PUT AC IN ALL QUADRANTS OF TV
        STAX    TVADDR+$0100
        STAX    TVADDR+$0200
        STAX    TVADDR+$0300
        INX                     ;BUMP INDEX
        BNE     FILLP           ;DO IT UNTIL TV IS FULL
        LDA#    <TVADDR         ;RESET CHARACTER CURSOR POINTER ADDRESS
        STA     TVPTR           ;BOTH HIGH AND LOW ORDER BYTES
        LDA#    >TVADDR
        STA     TVPTR+1
        RTS
        
        .PAGE
       
       ;DISPLAY CHAR PASSED IN AC ON TV SCREEN
        
TVOUTC: LDY#    0               ;SET UP INDEX FOR INDIRECTION
        CMP#    TVSPC           ;IS CHAR TO BE OUTPUT A CONTROL CHAR?
        BMI     TVCTRL          ;BRANCH IF YES
TVOUT:  STA@Y   TVPTR           ;STORE REGULAR CHARACTER IN TV MEMORY
        INC     TVPTR           ;INCREMENT CURSOR ADDRESS LOW ORDER
        BNE     TVORET          ;NO OVERFLOW, SO RETURN
        INC     TVPTR+1         ;OVERFLOW, SO INCREMENT HIGH ORDER
        LDA#    >TVTOP          ;ARE WE AT BOTTOM OF SCREEN?
        CMP     TVPTR+1
        BNE     TVORET          ;NO, SO RETURN
        JSR     TVSCRL          ;YES, SO SCROLL THE SCREEN
TVORET: RTS

TVCTRL: CMP#    TVBS            ;BACKSPACE CHAR?
        BEQ     DOBS            ;BRANCH IF YES
        CMP#    TVTAB           ;TABULATION CHAR?
        BEQ     DOTAB           ;BRANCH IF YES
        CMP#    TVLF            ;LINE FEED CHAR?
        BEQ     DOLF            ;BRANCH IF YES
        CMP#    TVCR            ;CARRIAGE RETURN CHAR?
        BEQ     DOCR            ;BRANCH IF YES
        CMP#    TVFF            ;FORM FEED CHAR?
        BNE     TVOUT           ;BRANCH IF NOT SPECIAL
        JMP     TVINIT          ;* PJMP * CLEAR SCREEN AND RETURN

        .PAGE
        
        ;CONTROL CHARACTER ROUTINES
        
DOBS:   LDA     TVPTR           ;ARE WE AT BEGINNING OF A LINE?
        AND#    COLMAX-1
        BEQ     TVORET          ;BRANCH IF YES.  DO NOTHING.
        DEC     TVPTR           ;NO SO BACK UP ONE CHAR POSITION
        LDA#    TVSPC           ;OVERWRITE CHAR BACKED OVER WITH A SPACE
        STA     TVPTR
        RTS
        
DOTAB:  LDA     TVPTR           ;TRUNCATE TO MODULO 8 FOR TABS
        AND#    $F8
        CLC                     ;PREPARE TO ADD
        ADC#    8               ;MOVE TO ADDRESS OF NEXT TAB COLUMN
        STA     TVPTR           ;UPDATE LOW ORDER BYTE
        BCS     INCHI           ;FIX HIGH ORDER IF NEEDED
        RTS
        
DOCR:   LDA#    COLMAX-1        ;SET CURSOR ADDRESS TO BEGINNING OF LINE
        EOR#    $FF
        AND     TVPTR
        STA     TVPTR
        RTS
        
DOLF:   CLC                     ;PREPARE TO ADD
        LDA     TVPTR           ;ADD ONE LINE LENGTH TO CURSOR ADDRESS
        ADC#    COLMAX          ;LOW ORDER BYTE
        STA     TVPTR
        BCC     LFRET           ;NO OVERFLOW, SO DONE
INCHI:  INC     TVPTR+1         ;OVERFLOW, SO INCREMENT HIGH ORDER BYTE
        LDA#    >TVTOP          ;ARE WE BEYOND THE BOTTOM OF SCREEN?
        CMP     TVPTR+1
        BNE     LFRET           ;BRANCH IF NOT
        JSR     TVSCRL          ;YES, SCROLL THE SCREEN
LFRET:  RTS

        .PAGE
        
        ;TV SCROLLING ROUTINES
        
TVSCRL: LDA#    >TVTOP-1        ;GET HIGH ORDER PAGE OF TV MEMORY
        STA     TVPTR+1         ;SET HIGH ORDER ADDR OF CURSOR POSITION
        LDA#    COLMAX-1        ;RESET LOW ORDER BYTE TO BEGINNING OF
        EOR#    $FF             ;BOTTOM LINE.
        STA     TVPTR
        LDA#    0               ;RESET SCROLLING POINTERS
        STA     TVSCAN
        LDA#    >TVADDR
        STA     TVSCAN+1
UPLOOP: JSR     UPONE           ;MOVE ONE PAGE OF TV RAM UP ONE LINE
        INC     TVSCAN+1        ;INCREMENT PAGE COUNT
        LDA     TVSCAN+1
        CMP#    >TVTOP          ;ARE WE DONE?
        BMI     UPLOOP          ;BRANCH IF NOT
                                ;* PFALL * CLEAR BOTTOM LINE AND RETURN
                                
CLRLN:  LDY#    COLMAX-1        ;PUT (ZERO BASED) NUMBER IF CHARS IN Y
        LDA#    TVSPC           ;STORE SPACES TO CLEAR THE LINE
CLRLP:  STA@Y   TVPTR           ;INDIRECT INTO LINE MEMORY
        DEY                     ;DECREMENT INDEX/COUNT
        BPL     CLRLP           ;DO IT FOR ENTIRE LINE
        RTS
        
UPONE:  LDY#    COLMAX          ;LOAD Y WITH LINE LENGTH
        LDX#    0               ;ZERO X FOR INDIRECTION
        LDA@Y   TVSCAN          ;GET CHAR FROM ONE LINE BELOW
        STAX@   TVSCAN          ;PUT CHAR ON CURRENT LINE
        INC     TVSCAN          ;INCREMENT LOW ORDER ADDR
        BNE     UPONE           ;LOOP UNTIL ALL CHARS HAVE BEEN MOVED
        RTS
        
        .END
