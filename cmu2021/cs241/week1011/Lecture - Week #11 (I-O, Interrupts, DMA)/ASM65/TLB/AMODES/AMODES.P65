;
; Author: Wayne Wall
; Description: Program to illustrate various 6502 addressing modes.
;
  .DEF  PZADDR = $0010        ;Address somewhere on page zero

  .LOC PZADDR

CHAR3:  .BYTE   'y            ;Some data bytes on page zero
CHAR4:  .BYTE   'n

ROW:    .BYTE   0             ;Holds display row number
COL:    .BYTE   0             ;Holds display column number

  .DEF BEGROW = 7             ;Beginning row (0,1,2,...) on the console display
  .DEF BEGCOL = 31            ;Beginning column (0,1,2,...) on the console display

  ;Program start address
  
  .DEF  STADDR = $0200
  
  .LOC  STADDR

PROG:   SEI                   ;Disable IRQ interrupts
        CLD                   ;Clear decimal mode
        LDX#    $FF           ;Init stack pointer
        TXS
        JSR     CONINI        ;Initialize console input
        JSR     CONINO        ;Initialize console output
        LDA#    BEGROW        ;Set beginning (row, column) value
        STA     ROW
        LDA#    BEGCOL
        STA     COL
        LDA     CHAR1         ;Display first character        
        JSR     COUTRC
        INC     ROW           ;Move down one row on display
        LDA     CHAR2         ;Display next character
        JSR     COUTRC
        INC     ROW           ;Move down one row on display
        LDA     CHAR3
        JSR     COUTRC
        INC     ROW           ;Move down one row on display
        LDA     CHAR4         ;Display character on next row
        JSR     COUTRC
        INC     ROW           ;Move down one row on display
        LDA#    'e            ;Display character on next row
        JSR     COUTRC
        JSR     CONINP        ;Wait for user to type any key
        BRK                   ;Break back to ROM executive program
       

;Subroutine to display the ASCII character passed in the accumulator on the screen
;at the (ROW, COL) position on the console display.  ROW and COL are page zero locations.

COUTRC: PHA                   ;Save AC value at entry on stack
        TXA                   ;X into AC
        PHA                   ;Save X value at entry on stack
        LDA     ROW           ;Position display cursor at (ROW, COL)
        LDX     COL
        JSR     CONCUR
        TSX                   ;Stack pointer into X
        INX                   ;Two bytes back on stack is character to be output
        INX
        LDAX    $0100         ;Get character to be output
        JSR     CONOUT        ;Display character at the current cursor position
        PLA                   ;Restore X to entry point value
        TAX
        PLA                   ;Restore AC to entry point value
        RTS                   ;Return to caller        
        
  .DEF  DATLOC = $800         ;Address to hold some arbitrary data

  .LOC  DATLOC

CHAR1:  .BYTE   'W
CHAR2:  .BYTE   'a

        .LINK   BIODEF        ;Include BIOS entry point definitions.
      
        .END
